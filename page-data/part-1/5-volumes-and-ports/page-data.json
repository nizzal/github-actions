{"componentChunkName":"component---src-templates-course-content-template-js","path":"/part-1/5-volumes-and-ports","result":{"data":{"page":{"htmlAst":{"type":"element","tagName":"div","properties":{},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We can use volumes to make it easier to store the downloads outside the containers ephemeral storage. With "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"bind mount"}]},{"type":"text","value":" we can mount a file or directory from our own machine into the container. Let's start another container with "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-v"}]},{"type":"text","value":" option, that requires an absolute path. We mount our current folder as "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"/mydir"}]},{"type":"text","value":" in our container, overwriting everything that we have put in that folder in our Dockerfile."}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker run -v \"$(pwd):/mydir\" youtube-dl https://imgur.com/JY5tHqr"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"So a volume is simply a folder (or a file) that is shared between the host machine and the container. If a file in volume is modified by a program that's running inside the container the changes are also saved from destruction when the container is shut down as the file exists on the host machine. This is the main use for volumes as otherwise all of the files wouldn't be accessible when restarting the container. Volumes also can be used to share files between containers and run programs that are able to load changed files."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In our youtube-dl we wanted to mount the whole directory since the files are fairly randomly named. If we wish to create a volume with only a single file we could also do that by pointing to it. For example "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-v $(pwd)/material.md:/mydir/material.md"}]},{"type":"text","value":" this way we could edit the material.md locally and have it change in the container (and vice versa). Note also that "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-v"}]},{"type":"text","value":" creates a directory if the file does not exist."}]},{"type":"element","tagName":"exercise","properties":{"name":"Exercise 1.9: Volumes"},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In this exercise we won't create a new Dockerfile."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Image "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"devopsdockeruh/simple-web-service"}]},{"type":"text","value":" creates a timestamp every two seconds to "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"/usr/src/app/text.log"}]},{"type":"text","value":" when it's not given a command. Start the\ncontainer with bind mount so that the logs are created into your filesystem."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Submit the command you used to complete the exercise."}]}]},{"type":"element","tagName":"h1","properties":{"id":"allowing-external-connections-into-containers","style":"position:relative;"},"children":[{"type":"text","value":"Allowing external connections into containers"},{"type":"element","tagName":"a","properties":{"href":"#allowing-external-connections-into-containers","ariaLabel":"allowing external connections into containers permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The details on how programs communicate are not detailed in this course. Courses on Operating Systems and the Networking courses explain subjects in detail. In this course you only need to know the following simplified basics:"}]},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Sending messages: Programs can send messages to "},{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/URL","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"URL"}]},{"type":"text","value":" addresses such as this: "},{"type":"element","tagName":"a","properties":{"href":"http://127.0.0.1:3000","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"http://127.0.0.1:3000"}]},{"type":"text","value":" where http is the "},{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"protocol"}]}]},{"type":"text","value":", 127.0.0.1 is a ip address, and and 3000 is a "},{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/Port_(computer_networking)","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"port"}]}]},{"type":"text","value":". Note the ip part could also be a "},{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/Hostname","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"hostname"}]}]},{"type":"text","value":": 127.0.0.1 is also called "},{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/Localhost","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"localhost"}]}]},{"type":"text","value":" so instead you could use "},{"type":"element","tagName":"a","properties":{"href":"http://localhost:3000","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"http://localhost:3000"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Receiving messages: Programs can be assigned to listen to any available port. If a program is listening for traffic on port 3000, and a message is sent to that port, it will receive it (and possibly process it)."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The address "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"127.0.0.1"}]},{"type":"text","value":" and hostname "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"localhost"}]},{"type":"text","value":" are special ones, they refer to the machine or container itself, so if you are on a container and send message to "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"localhost"}]},{"type":"text","value":", the target is the same container. Similarly, if you are sending the request from outside of a container to "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"localhost"}]},{"type":"text","value":", the target is your machine."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You can map your host machine port to a container port."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Opening a connection from outside world to a docker container happens in two steps:"}]},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Exposing port"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Publishing port"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Exposing a container port means telling Docker that the container listens to a certain port. This doesn't do much, except it helps humans with the configuration."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Publishing a port means that Docker will map host ports to the container ports."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To expose a port, add the line "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"EXPOSE <port>"}]},{"type":"text","value":" in your Dockerfile"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To publish a port, run the container with "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-p <host-port>:<container-port>"}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If you leave out the host port and only specify the container port, docker will automatically choose a free port as the host port:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker run -p 4567 app-in-port"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We could also limit connections to certain protocol only, e.g. udp by adding the protocol at the end: "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"EXPOSE <port>/udp"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-p <host-port>:<container-port>/udp"}]},{"type":"text","value":"."}]},{"type":"element","tagName":"text-box","properties":{"name":"Security reminder: Opening a door to the internet","variant":"hint"},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Since we are opening a port to the application, anyone from the internet could come in and access what you're running."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Don't haphazardly open just any ports - a way for an attacker to get in is by exploiting a port you opened to an insecure server. An easy way to avoid this is by defining the host-side port like this "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-p 127.0.0.1:3456:3000"}]},{"type":"text","value":". This will only allow requests from your computer through port 3456 to the application port 3000, with no outside access allowed."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The short syntax, "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-p 3456:3000"}]},{"type":"text","value":", will result in the same as "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-p 0.0.0.0:3456:3000"}]},{"type":"text","value":", which truly is opening the port to everyone."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Usually, this isn't risky. But depending on the application, it is something you should consider!"}]}]},{"type":"element","tagName":"exercise","properties":{"name":"Exercise 1.10: Ports open"},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In this exercise, we won't create a new Dockerfile."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The image "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"devopsdockeruh/simple-web-service"}]},{"type":"text","value":" will start a web service in port "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"8080"}]},{"type":"text","value":" when given the command \"server\". From 1.7 you should have an image ready for this. Use -p flag to access the contents with\nyour browser. The output to your browser should be something like:\n"},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"{ message: \"You connected to the following path: ..."}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Submit your used commands for this exercise."}]}]}]},"html":"<div><p>We can use volumes to make it easier to store the downloads outside the containers ephemeral storage. With <strong>bind mount</strong> we can mount a file or directory from our own machine into the container. Let's start another container with <code class=\"language-text\">-v</code> option, that requires an absolute path. We mount our current folder as <code class=\"language-text\">/mydir</code> in our container, overwriting everything that we have put in that folder in our Dockerfile.</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker run -v &quot;$(pwd):/mydir&quot; youtube-dl https://imgur.com/JY5tHqr</code></pre></div><p>So a volume is simply a folder (or a file) that is shared between the host machine and the container. If a file in volume is modified by a program that's running inside the container the changes are also saved from destruction when the container is shut down as the file exists on the host machine. This is the main use for volumes as otherwise all of the files wouldn't be accessible when restarting the container. Volumes also can be used to share files between containers and run programs that are able to load changed files.</p><p>In our youtube-dl we wanted to mount the whole directory since the files are fairly randomly named. If we wish to create a volume with only a single file we could also do that by pointing to it. For example <code class=\"language-text\">-v $(pwd)/material.md:/mydir/material.md</code> this way we could edit the material.md locally and have it change in the container (and vice versa). Note also that <code class=\"language-text\">-v</code> creates a directory if the file does not exist.</p><exercise name=\"Exercise 1.9: Volumes\"><p>In this exercise we won't create a new Dockerfile.</p><p>Image <code class=\"language-text\">devopsdockeruh/simple-web-service</code> creates a timestamp every two seconds to <code class=\"language-text\">/usr/src/app/text.log</code> when it's not given a command. Start the\ncontainer with bind mount so that the logs are created into your filesystem.</p><p>Submit the command you used to complete the exercise.</p></exercise><h1 id=\"allowing-external-connections-into-containers\" style=\"position:relative;\">Allowing external connections into containers<a href=\"#allowing-external-connections-into-containers\" aria-label=\"allowing external connections into containers permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1><p>The details on how programs communicate are not detailed in this course. Courses on Operating Systems and the Networking courses explain subjects in detail. In this course you only need to know the following simplified basics:</p><ul>\n<li>\n<p>Sending messages: Programs can send messages to <a href=\"https://en.wikipedia.org/wiki/URL\" target=\"_blank\" rel=\"noopener noreferrer\">URL</a> addresses such as this: <a href=\"http://127.0.0.1:3000\" target=\"_blank\" rel=\"noopener noreferrer\">http://127.0.0.1:3000</a> where http is the <a href=\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol\" target=\"_blank\" rel=\"noopener noreferrer\"><em>protocol</em></a>, 127.0.0.1 is a ip address, and and 3000 is a <a href=\"https://en.wikipedia.org/wiki/Port_(computer_networking)\" target=\"_blank\" rel=\"noopener noreferrer\"><em>port</em></a>. Note the ip part could also be a <a href=\"https://en.wikipedia.org/wiki/Hostname\" target=\"_blank\" rel=\"noopener noreferrer\"><em>hostname</em></a>: 127.0.0.1 is also called <a href=\"https://en.wikipedia.org/wiki/Localhost\" target=\"_blank\" rel=\"noopener noreferrer\"><em>localhost</em></a> so instead you could use <a href=\"http://localhost:3000\" target=\"_blank\" rel=\"noopener noreferrer\">http://localhost:3000</a>.</p>\n</li>\n<li>\n<p>Receiving messages: Programs can be assigned to listen to any available port. If a program is listening for traffic on port 3000, and a message is sent to that port, it will receive it (and possibly process it).</p>\n</li>\n</ul><p>The address <em>127.0.0.1</em> and hostname <em>localhost</em> are special ones, they refer to the machine or container itself, so if you are on a container and send message to <em>localhost</em>, the target is the same container. Similarly, if you are sending the request from outside of a container to <em>localhost</em>, the target is your machine.</p><p>You can map your host machine port to a container port.</p><p>Opening a connection from outside world to a docker container happens in two steps:</p><ul>\n<li>\n<p>Exposing port</p>\n</li>\n<li>\n<p>Publishing port</p>\n</li>\n</ul><p>Exposing a container port means telling Docker that the container listens to a certain port. This doesn't do much, except it helps humans with the configuration.</p><p>Publishing a port means that Docker will map host ports to the container ports.</p><p>To expose a port, add the line <code class=\"language-text\">EXPOSE &lt;port&gt;</code> in your Dockerfile</p><p>To publish a port, run the container with <code class=\"language-text\">-p &lt;host-port&gt;:&lt;container-port&gt;</code></p><p>If you leave out the host port and only specify the container port, docker will automatically choose a free port as the host port:</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker run -p 4567 app-in-port</code></pre></div><p>We could also limit connections to certain protocol only, e.g. udp by adding the protocol at the end: <code class=\"language-text\">EXPOSE &lt;port&gt;/udp</code> and <code class=\"language-text\">-p &lt;host-port&gt;:&lt;container-port&gt;/udp</code>.</p><text-box name=\"Security reminder: Opening a door to the internet\" variant=\"hint\"><p>Since we are opening a port to the application, anyone from the internet could come in and access what you're running.</p><p>Don't haphazardly open just any ports - a way for an attacker to get in is by exploiting a port you opened to an insecure server. An easy way to avoid this is by defining the host-side port like this <code class=\"language-text\">-p 127.0.0.1:3456:3000</code>. This will only allow requests from your computer through port 3456 to the application port 3000, with no outside access allowed.</p><p>The short syntax, <code class=\"language-text\">-p 3456:3000</code>, will result in the same as <code class=\"language-text\">-p 0.0.0.0:3456:3000</code>, which truly is opening the port to everyone.</p><p>Usually, this isn't risky. But depending on the application, it is something you should consider!</p></text-box><exercise name=\"Exercise 1.10: Ports open\"><p>In this exercise, we won't create a new Dockerfile.</p><p>The image <code class=\"language-text\">devopsdockeruh/simple-web-service</code> will start a web service in port <code class=\"language-text\">8080</code> when given the command \"server\". From 1.7 you should have an image ready for this. Use -p flag to access the contents with\nyour browser. The output to your browser should be something like:\n<code class=\"language-text\">{ message: &quot;You connected to the following path: ...</code></p><p>Submit your used commands for this exercise.</p></exercise></div>","frontmatter":{"path":"/part-1/5-volumes-and-ports","title":"Interacting with the container via volumes and ports"},"fileAbsolutePath":"/home/runner/work/github-actions/github-actions/data/part-1/section-5.md"},"allPages":{"edges":[{"node":{"id":"0bef8eef-de93-5202-8af6-02b5fe6ec755","frontmatter":{"path":"/faq","title":"Frequently asked questions"}}},{"node":{"id":"41156626-bde8-5a7c-ac92-ec312076480a","frontmatter":{"path":"/frontmatter-guide","title":"Frontmatter-guide"}}},{"node":{"id":"37487c30-534e-506d-883c-b01a30949500","frontmatter":{"path":"/getting-started","title":"Getting started"}}},{"node":{"id":"77678795-397b-583f-bc6b-dc8c20f6525e","frontmatter":{"path":"/","title":"About this course"}}},{"node":{"id":"67c531a3-28aa-559a-8475-f768021829f2","frontmatter":{"path":"/links","title":"Links"}}},{"node":{"id":"2df82908-2caf-5bdd-bf0c-8113de55000a","frontmatter":{"path":"/part-1","title":"Part 1"}}},{"node":{"id":"1d814ff0-9cd5-5a92-b1fc-b3009eb70d9a","frontmatter":{"path":"/part-1/2-running-and-stopping","title":"Running and stopping containers"}}},{"node":{"id":"bff7ba6f-db2c-57b8-9bc7-a7b6f0b0ae86","frontmatter":{"path":"/part-1/3-in-depth-dive-to-images","title":"In-depth dive to images"}}},{"node":{"id":"596768d5-0f2e-5931-a5ad-36213dde53b9","frontmatter":{"path":"/part-1/4-defining-start-conditions","title":"Defining start conditions for the container"}}},{"node":{"id":"4bbdd8da-2aa2-5fad-b1d8-c16e6721792a","frontmatter":{"path":"/part-1/5-volumes-and-ports","title":"Interacting with the container via volumes and ports"}}},{"node":{"id":"a828a58c-1e1e-57c7-b755-fdff4b7055be","frontmatter":{"path":"/part-1/6-docker-hub","title":"Utilizing tools from the Registry"}}},{"node":{"id":"620db84d-9937-5055-92a6-5a4a360a5164","frontmatter":{"path":"/part-1/7-summary","title":"Summary"}}},{"node":{"id":"873dca8b-d040-5608-9b96-0a7d98e85974","frontmatter":{"path":"/part-2","title":"Part 2"}}},{"node":{"id":"96fc03c4-03c2-5fe0-b8cc-adcb4ec70c5d","frontmatter":{"path":"/part-2/1-migrating-to-docker-compose","title":"Migrating to docker compose"}}},{"node":{"id":"f6a251cc-98b5-51da-bfd9-3e9292d0a2e0","frontmatter":{"path":"/part-2/2-docker-networking","title":"Docker networking"}}},{"node":{"id":"6b09524a-3300-5cbe-81f2-2d17c9b6db41","frontmatter":{"path":"/part-2/3-volumes-in-action","title":"Volumes in action"}}},{"node":{"id":"e540cf5b-56e1-580f-8f88-31edacafe428","frontmatter":{"path":"/part-2/4-containers-in-development","title":"Containers in development"}}},{"node":{"id":"a1b889d8-4208-5ab3-a0f1-e60c1b22f098","frontmatter":{"path":"/part-2/5-summary","title":"Summary"}}},{"node":{"id":"d2278081-cb52-560f-9ad9-d390682cdc8c","frontmatter":{"path":"/part-3","title":"Part 3"}}},{"node":{"id":"e6eabd79-e91b-55ea-9749-864921da8204","frontmatter":{"path":"/part-3/1-deeper-understainding-of-containers","title":"Deeper understanding of containers"}}},{"node":{"id":"5e6a2ffe-7091-51a3-982f-4b77fa47caa1","frontmatter":{"path":"/part-3/2-deployment-pipelines","title":"Deployment pipelines"}}},{"node":{"id":"1c515bb2-daed-5445-bc9b-f08746fa1151","frontmatter":{"path":"/part-1/1-getting-started","title":"Definitions and basic concepts"}}},{"node":{"id":"c29c1489-bbec-5198-9797-a57896ccc1c5","frontmatter":{"path":"/part-3/6-end","title":"End"}}},{"node":{"id":"4c1acb10-bd08-52a2-bbb7-3bf3dd578525","frontmatter":{"path":"/part-3/3-using-non-root-user","title":"Using a non-root user"}}},{"node":{"id":"a2bdf824-5e5e-57da-94a7-395e8bc5ad26","frontmatter":{"path":"/part-3/5-multi-host-environments","title":"Multi-host environments"}}},{"node":{"id":"1f373fc5-9117-5346-ac21-48fceadc9b95","frontmatter":{"path":"/part-3/4-optimizing-the-image-size","title":"Optimizing the image size"}}}]}},"pageContext":{}},"staticQueryHashes":["3294351120","994120085"]}