{"componentChunkName":"component---src-templates-course-content-template-js","path":"/part-1/2-running-and-stopping","result":{"data":{"page":{"htmlAst":{"type":"element","tagName":"div","properties":{},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Next we will start using a more useful image than hello-world. We can run ubuntu just with "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker run ubuntu"}]},{"type":"text","value":"."}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker run ubuntu\n  Unable to find image 'ubuntu:latest' locally\n  latest: Pulling from library/ubuntu\n  83ee3a23efb7: Pull complete\n  db98fc6f11f0: Pull complete\n  f611acd52c6c: Pull complete\n  Digest: sha256:703218c0465075f4425e58fac086e09e1de5c340b12976ab9eb8ad26615c3715\n  Status: Downloaded newer image for ubuntu:latest"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Anticlimactic as nothing really happened. The image was downloaded and ran and that was the end of that. It actually tried to open a shell but we will need to add a few flags to interact with it. "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-t"}]},{"type":"text","value":" will create a tty."}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker run -t ubuntu\n  root@f83969ce2cd1:/#"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now we're inside the container and if we input "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ls"}]},{"type":"text","value":" and press enter... nothing happens. Because our terminal is not sending the messages into the container. The "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-i"}]},{"type":"text","value":" flag will instruct to pass the STDIN to the container. If you're stuck with the other terminal you can just stop the container."}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker run -it ubuntu\n  root@2eb70ecf5789:/# ls\n  bin  boot  dev  etc  home  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Great! Now we know at least 3 useful flags. "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-i"}]},{"type":"text","value":" (interactive), "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-t"}]},{"type":"text","value":" (tty) and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-d"}]},{"type":"text","value":" (detached)."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let's throw in a few more and run a container in the background:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker run -d -it --name looper ubuntu sh -c 'while true; do date; sleep 1; done'"}]}]}]},{"type":"element","tagName":"text-box","properties":{"name":"Quotes","variant":"hint"},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If you are command prompt (Windows) user you must use double quotes around the script i.e. "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker run -d -it --name looper ubuntu sh -c \"while true; do date; sleep 1; done\""}]},{"type":"text","value":". The quote or double-quote may haunt you later during the course."}]}]},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The first part, "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker run -d"}]},{"type":"text","value":". Should be familiar by now, run container detached."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Followed by "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-it"}]},{"type":"text","value":" is short for "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-i"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-t"}]},{"type":"text","value":". Also familiar, "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-it"}]},{"type":"text","value":" allows you to interact with the container by using the command line."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Because we ran the container with "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"--name looper"}]},{"type":"text","value":", we can now reference it easily."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The image is "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ubuntu"}]},{"type":"text","value":" and what follows it is the command given to the container."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"And to check that it's running, run "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker container ls"}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let's follow "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-f"}]},{"type":"text","value":" the output of logs with"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker logs -f looper\n  Thu Feb  4 15:51:29 UTC 2021\n  Thu Feb  4 15:51:30 UTC 2021\n  Thu Feb  4 15:51:31 UTC 2021\n  ..."}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let's test pausing the looper without exiting or stopping it. In another terminal run "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker pause looper"}]},{"type":"text","value":". Notice how the logs output has paused in the first terminal. To unpause run "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker unpause looper"}]},{"type":"text","value":"."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Keep the logs open and attach to the running container from the second terminal using 'attach':"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker attach looper\n  Mon Jan 15 19:26:54 UTC 2018\n  Mon Jan 15 19:26:55 UTC 2018\n  ..."}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now you have process logs (STDOUT) running in two terminals. Now press control+c in the attached window. The container is stopped because the process is no longer running."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If we want to attach to a container while making sure we don't close it from the other terminal we can specify to not attach STDIN with "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"--no-stdin"}]},{"type":"text","value":" option. Let's start the stopped container with "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker start looper"}]},{"type":"text","value":" and attach to it with "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"--no-stdin"}]},{"type":"text","value":"."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Then try control+c."}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker start looper\n\n$ docker attach --no-stdin looper\n  Mon Jan 15 19:27:54 UTC 2018\n  Mon Jan 15 19:27:55 UTC 2018\n  ^C"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The container will continue running. Control+c now only disconnects you from the STDOUT."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To enter a container, we can start a new process in it."}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker exec -it looper bash\n\n  root@2a49df3ba735:/# ps aux\n\n  USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\n  root         1  0.2  0.0   2612  1512 pts/0    Ss+  12:36   0:00 sh -c while true; do date; sleep 1; done\n  root        64  1.5  0.0   4112  3460 pts/1    Ss   12:36   0:00 bash\n  root        79  0.0  0.0   2512   584 pts/0    S+   12:36   0:00 sleep 1\n  root        80  0.0  0.0   5900  2844 pts/1    R+   12:36   0:00 ps aux"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"From the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ps aux"}]},{"type":"text","value":" listing we can see that our "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"bash"}]},{"type":"text","value":" process got PID (process ID) of 64."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now that we're inside the container it behaves as you'd expect from ubuntu, and we can exit the container with "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"exit"}]},{"type":"text","value":" and then either kill or stop the container."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Our looper won't stop for a SIGTERM signal sent by a stop command. To terminate the process, stop follows the SIGTERM with a SIGKILL after a grace period. In this case, it's simply faster to use kill."}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker kill looper\n$ docker rm looper"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Running the previous two commands is basically equivalent to running "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker rm --force looper"}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let's start another process with "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-it"}]},{"type":"text","value":" and add "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"--rm"}]},{"type":"text","value":" in order to remove it automatically after it has exited. The "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"--rm"}]},{"type":"text","value":" ensures that there are no garbage containers left behind. It also means that "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker start"}]},{"type":"text","value":" can not be used to start the container after it has exited."}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker run -d --rm -it --name looper-it ubuntu sh -c 'while true; do date; sleep 1; done'"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now let's attach to the container and hit control+p, control+q to detach us from the STDOUT."}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker attach looper-it\n\n  Mon Jan 15 19:50:42 UTC 2018\n  Mon Jan 15 19:50:43 UTC 2018\n  ^P^Qread escape sequence"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Instead, if we had used ctrl+c, it would have sent a kill signal followed by removing the container as we specified —rm in "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker run"}]},{"type":"text","value":" command."}]},{"type":"element","tagName":"exercise","properties":{"name":"Exercise 1.3: Secret message"},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now that we've warmed up it's time to get inside a container while it's running!"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Image "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"devopsdockeruh/simple-web-service:ubuntu"}]},{"type":"text","value":" will start a container that outputs logs into a file.\nGo inside the container and use "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"tail -f ./text.log"}]},{"type":"text","value":" to follow the logs.\nEvery 10 seconds the clock will send you a \"secret message\"."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Submit the secret message and command(s) given as your answer."}]}]},{"type":"element","tagName":"exercise","properties":{"name":"Exercise 1.4: Missing dependencies"},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Start a ubuntu image with the process "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"sh -c 'echo \"Input website:\"; read website; echo \"Searching..\"; sleep 1; curl http://$website;'"}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You will notice that a few things required for proper execution are missing. Be sure to remind yourself which flags\nto use so that the read actually waits for input."}]},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Note also that curl is NOT installed in the container yet. You will have to install it from inside of the container."}]},{"type":"text","value":"\n"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Test inputting "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"helsinki.fi"}]},{"type":"text","value":" into the application. It should respond with something like"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"html"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-html"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-html"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"html"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"head"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"title"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":"301 Moved Permanently"},{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"</"}]},{"type":"text","value":"title"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"</"}]},{"type":"text","value":"head"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":"\n\n  "},{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"body"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"h1"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":"Moved Permanently"},{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"</"}]},{"type":"text","value":"h1"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"p"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":"The document has moved "},{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"a"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","attr-name"]},"children":[{"type":"text","value":"href"}]},{"type":"element","tagName":"span","properties":{"className":["token","attr-value"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation","attr-equals"]},"children":[{"type":"text","value":"="}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"\""}]},{"type":"text","value":"http://www.helsinki.fi/"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"\""}]}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":"here"},{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"</"}]},{"type":"text","value":"a"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":"."},{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"</"}]},{"type":"text","value":"p"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"</"}]},{"type":"text","value":"body"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","tag"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"</"}]},{"type":"text","value":"html"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This time return the command you used to start process and the command(s) you used to fix the ensuing problems."}]},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"This exercise has multiple solutions, if the curl for helsinki.fi works then it's done. Can you figure out other (smart) solutions?"}]},{"type":"text","value":"\n"}]}]}]},"html":"<div><p>Next we will start using a more useful image than hello-world. We can run ubuntu just with <code class=\"language-text\">docker run ubuntu</code>.</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker run ubuntu\n  Unable to find image &#39;ubuntu:latest&#39; locally\n  latest: Pulling from library/ubuntu\n  83ee3a23efb7: Pull complete\n  db98fc6f11f0: Pull complete\n  f611acd52c6c: Pull complete\n  Digest: sha256:703218c0465075f4425e58fac086e09e1de5c340b12976ab9eb8ad26615c3715\n  Status: Downloaded newer image for ubuntu:latest</code></pre></div><p>Anticlimactic as nothing really happened. The image was downloaded and ran and that was the end of that. It actually tried to open a shell but we will need to add a few flags to interact with it. <code class=\"language-text\">-t</code> will create a tty.</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker run -t ubuntu\n  root@f83969ce2cd1:/#</code></pre></div><p>Now we're inside the container and if we input <code class=\"language-text\">ls</code> and press enter... nothing happens. Because our terminal is not sending the messages into the container. The <code class=\"language-text\">-i</code> flag will instruct to pass the STDIN to the container. If you're stuck with the other terminal you can just stop the container.</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker run -it ubuntu\n  root@2eb70ecf5789:/# ls\n  bin  boot  dev  etc  home  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</code></pre></div><p>Great! Now we know at least 3 useful flags. <code class=\"language-text\">-i</code> (interactive), <code class=\"language-text\">-t</code> (tty) and <code class=\"language-text\">-d</code> (detached).</p><p>Let's throw in a few more and run a container in the background:</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker run -d -it --name looper ubuntu sh -c &#39;while true; do date; sleep 1; done&#39;</code></pre></div><text-box name=\"Quotes\" variant=\"hint\"><p>If you are command prompt (Windows) user you must use double quotes around the script i.e. <code class=\"language-text\">docker run -d -it --name looper ubuntu sh -c &quot;while true; do date; sleep 1; done&quot;</code>. The quote or double-quote may haunt you later during the course.</p></text-box><ul>\n<li>\n<p>The first part, <code class=\"language-text\">docker run -d</code>. Should be familiar by now, run container detached.</p>\n</li>\n<li>\n<p>Followed by <code class=\"language-text\">-it</code> is short for <code class=\"language-text\">-i</code> and <code class=\"language-text\">-t</code>. Also familiar, <code class=\"language-text\">-it</code> allows you to interact with the container by using the command line.</p>\n</li>\n<li>\n<p>Because we ran the container with <code class=\"language-text\">--name looper</code>, we can now reference it easily.</p>\n</li>\n<li>\n<p>The image is <code class=\"language-text\">ubuntu</code> and what follows it is the command given to the container.</p>\n</li>\n</ul><p>And to check that it's running, run <code class=\"language-text\">docker container ls</code></p><p>Let's follow <code class=\"language-text\">-f</code> the output of logs with</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker logs -f looper\n  Thu Feb  4 15:51:29 UTC 2021\n  Thu Feb  4 15:51:30 UTC 2021\n  Thu Feb  4 15:51:31 UTC 2021\n  ...</code></pre></div><p>Let's test pausing the looper without exiting or stopping it. In another terminal run <code class=\"language-text\">docker pause looper</code>. Notice how the logs output has paused in the first terminal. To unpause run <code class=\"language-text\">docker unpause looper</code>.</p><p>Keep the logs open and attach to the running container from the second terminal using 'attach':</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker attach looper\n  Mon Jan 15 19:26:54 UTC 2018\n  Mon Jan 15 19:26:55 UTC 2018\n  ...</code></pre></div><p>Now you have process logs (STDOUT) running in two terminals. Now press control+c in the attached window. The container is stopped because the process is no longer running.</p><p>If we want to attach to a container while making sure we don't close it from the other terminal we can specify to not attach STDIN with <code class=\"language-text\">--no-stdin</code> option. Let's start the stopped container with <code class=\"language-text\">docker start looper</code> and attach to it with <code class=\"language-text\">--no-stdin</code>.</p><p>Then try control+c.</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker start looper\n\n$ docker attach --no-stdin looper\n  Mon Jan 15 19:27:54 UTC 2018\n  Mon Jan 15 19:27:55 UTC 2018\n  ^C</code></pre></div><p>The container will continue running. Control+c now only disconnects you from the STDOUT.</p><p>To enter a container, we can start a new process in it.</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker exec -it looper bash\n\n  root@2a49df3ba735:/# ps aux\n\n  USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\n  root         1  0.2  0.0   2612  1512 pts/0    Ss+  12:36   0:00 sh -c while true; do date; sleep 1; done\n  root        64  1.5  0.0   4112  3460 pts/1    Ss   12:36   0:00 bash\n  root        79  0.0  0.0   2512   584 pts/0    S+   12:36   0:00 sleep 1\n  root        80  0.0  0.0   5900  2844 pts/1    R+   12:36   0:00 ps aux</code></pre></div><p>From the <code class=\"language-text\">ps aux</code> listing we can see that our <code class=\"language-text\">bash</code> process got PID (process ID) of 64.</p><p>Now that we're inside the container it behaves as you'd expect from ubuntu, and we can exit the container with <code class=\"language-text\">exit</code> and then either kill or stop the container.</p><p>Our looper won't stop for a SIGTERM signal sent by a stop command. To terminate the process, stop follows the SIGTERM with a SIGKILL after a grace period. In this case, it's simply faster to use kill.</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker kill looper\n$ docker rm looper</code></pre></div><p>Running the previous two commands is basically equivalent to running <code class=\"language-text\">docker rm --force looper</code></p><p>Let's start another process with <code class=\"language-text\">-it</code> and add <code class=\"language-text\">--rm</code> in order to remove it automatically after it has exited. The <code class=\"language-text\">--rm</code> ensures that there are no garbage containers left behind. It also means that <code class=\"language-text\">docker start</code> can not be used to start the container after it has exited.</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker run -d --rm -it --name looper-it ubuntu sh -c &#39;while true; do date; sleep 1; done&#39;</code></pre></div><p>Now let's attach to the container and hit control+p, control+q to detach us from the STDOUT.</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker attach looper-it\n\n  Mon Jan 15 19:50:42 UTC 2018\n  Mon Jan 15 19:50:43 UTC 2018\n  ^P^Qread escape sequence</code></pre></div><p>Instead, if we had used ctrl+c, it would have sent a kill signal followed by removing the container as we specified —rm in <code class=\"language-text\">docker run</code> command.</p><exercise name=\"Exercise 1.3: Secret message\"><p>Now that we've warmed up it's time to get inside a container while it's running!</p><p>Image <code class=\"language-text\">devopsdockeruh/simple-web-service:ubuntu</code> will start a container that outputs logs into a file.\nGo inside the container and use <code class=\"language-text\">tail -f ./text.log</code> to follow the logs.\nEvery 10 seconds the clock will send you a \"secret message\".</p><p>Submit the secret message and command(s) given as your answer.</p></exercise><exercise name=\"Exercise 1.4: Missing dependencies\"><p>Start a ubuntu image with the process <code class=\"language-text\">sh -c &#39;echo &quot;Input website:&quot;; read website; echo &quot;Searching..&quot;; sleep 1; curl http://$website;&#39;</code></p><p>You will notice that a few things required for proper execution are missing. Be sure to remind yourself which flags\nto use so that the read actually waits for input.</p><blockquote>\n<p>Note also that curl is NOT installed in the container yet. You will have to install it from inside of the container.</p>\n</blockquote><p>Test inputting <code class=\"language-text\">helsinki.fi</code> into the application. It should respond with something like</p><div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>301 Moved Permanently<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Moved Permanently<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>The document has moved <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.helsinki.fi/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>here<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div><p>This time return the command you used to start process and the command(s) you used to fix the ensuing problems.</p><ul>\n<li>This exercise has multiple solutions, if the curl for helsinki.fi works then it's done. Can you figure out other (smart) solutions?</li>\n</ul></exercise></div>","frontmatter":{"path":"/part-1/2-running-and-stopping","title":"Running and stopping containers"},"fileAbsolutePath":"/home/runner/work/github-actions/github-actions/data/part-1/section-2.md"},"allPages":{"edges":[{"node":{"id":"0bef8eef-de93-5202-8af6-02b5fe6ec755","frontmatter":{"path":"/faq","title":"Frequently asked questions"}}},{"node":{"id":"41156626-bde8-5a7c-ac92-ec312076480a","frontmatter":{"path":"/frontmatter-guide","title":"Frontmatter-guide"}}},{"node":{"id":"37487c30-534e-506d-883c-b01a30949500","frontmatter":{"path":"/getting-started","title":"Getting started"}}},{"node":{"id":"77678795-397b-583f-bc6b-dc8c20f6525e","frontmatter":{"path":"/","title":"About this course"}}},{"node":{"id":"67c531a3-28aa-559a-8475-f768021829f2","frontmatter":{"path":"/links","title":"Links"}}},{"node":{"id":"2df82908-2caf-5bdd-bf0c-8113de55000a","frontmatter":{"path":"/part-1","title":"Part 1"}}},{"node":{"id":"1d814ff0-9cd5-5a92-b1fc-b3009eb70d9a","frontmatter":{"path":"/part-1/2-running-and-stopping","title":"Running and stopping containers"}}},{"node":{"id":"bff7ba6f-db2c-57b8-9bc7-a7b6f0b0ae86","frontmatter":{"path":"/part-1/3-in-depth-dive-to-images","title":"In-depth dive to images"}}},{"node":{"id":"596768d5-0f2e-5931-a5ad-36213dde53b9","frontmatter":{"path":"/part-1/4-defining-start-conditions","title":"Defining start conditions for the container"}}},{"node":{"id":"4bbdd8da-2aa2-5fad-b1d8-c16e6721792a","frontmatter":{"path":"/part-1/5-volumes-and-ports","title":"Interacting with the container via volumes and ports"}}},{"node":{"id":"a828a58c-1e1e-57c7-b755-fdff4b7055be","frontmatter":{"path":"/part-1/6-docker-hub","title":"Utilizing tools from the Registry"}}},{"node":{"id":"620db84d-9937-5055-92a6-5a4a360a5164","frontmatter":{"path":"/part-1/7-summary","title":"Summary"}}},{"node":{"id":"873dca8b-d040-5608-9b96-0a7d98e85974","frontmatter":{"path":"/part-2","title":"Part 2"}}},{"node":{"id":"96fc03c4-03c2-5fe0-b8cc-adcb4ec70c5d","frontmatter":{"path":"/part-2/1-migrating-to-docker-compose","title":"Migrating to docker compose"}}},{"node":{"id":"f6a251cc-98b5-51da-bfd9-3e9292d0a2e0","frontmatter":{"path":"/part-2/2-docker-networking","title":"Docker networking"}}},{"node":{"id":"6b09524a-3300-5cbe-81f2-2d17c9b6db41","frontmatter":{"path":"/part-2/3-volumes-in-action","title":"Volumes in action"}}},{"node":{"id":"e540cf5b-56e1-580f-8f88-31edacafe428","frontmatter":{"path":"/part-2/4-containers-in-development","title":"Containers in development"}}},{"node":{"id":"a1b889d8-4208-5ab3-a0f1-e60c1b22f098","frontmatter":{"path":"/part-2/5-summary","title":"Summary"}}},{"node":{"id":"d2278081-cb52-560f-9ad9-d390682cdc8c","frontmatter":{"path":"/part-3","title":"Part 3"}}},{"node":{"id":"e6eabd79-e91b-55ea-9749-864921da8204","frontmatter":{"path":"/part-3/1-deeper-understainding-of-containers","title":"Deeper understanding of containers"}}},{"node":{"id":"5e6a2ffe-7091-51a3-982f-4b77fa47caa1","frontmatter":{"path":"/part-3/2-deployment-pipelines","title":"Deployment pipelines"}}},{"node":{"id":"1c515bb2-daed-5445-bc9b-f08746fa1151","frontmatter":{"path":"/part-1/1-getting-started","title":"Definitions and basic concepts"}}},{"node":{"id":"c29c1489-bbec-5198-9797-a57896ccc1c5","frontmatter":{"path":"/part-3/6-end","title":"End"}}},{"node":{"id":"4c1acb10-bd08-52a2-bbb7-3bf3dd578525","frontmatter":{"path":"/part-3/3-using-non-root-user","title":"Using a non-root user"}}},{"node":{"id":"a2bdf824-5e5e-57da-94a7-395e8bc5ad26","frontmatter":{"path":"/part-3/5-multi-host-environments","title":"Multi-host environments"}}},{"node":{"id":"1f373fc5-9117-5346-ac21-48fceadc9b95","frontmatter":{"path":"/part-3/4-optimizing-the-image-size","title":"Optimizing the image size"}}}]}},"pageContext":{}},"staticQueryHashes":["3294351120","994120085"]}