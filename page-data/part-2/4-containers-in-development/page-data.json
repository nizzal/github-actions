{"componentChunkName":"component---src-templates-course-content-template-js","path":"/part-2/4-containers-in-development","result":{"data":{"page":{"htmlAst":{"type":"element","tagName":"div","properties":{},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Containers are not only great in production. They can be used in development environments as well and offer a number of benefits. The same works-on-my-machine problem is faced often when a new developer joins the team. Not to mention the headache of switching runtime versions or a local database!"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In our team at the University of Helsinki, the target for all project development environments is to have the setup so that a new developer only needs to install docker to get started. Of course, the target is usually missed as you need things like your favorite text editor."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Even if your application is not completely containerized during development, containers can be of use. For example, say you need mongodb version 4.0.22 installed in port 5656. It's now oneliner: \"docker run -p 5656:27017 mongo:4.0.22\" (mongodb uses 27017 as default port)."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let's containerize my node development environment. This will need some insider knowledge of node. But here is a simplified explanation if you're not familiar: libraries are defined in "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"package.json"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"package-lock.json"}]},{"type":"text","value":" and installed with "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"npm install"}]},{"type":"text","value":". npm is node package manager and node is the runtime. To run application with the packages we have script defined in package.json that instructs node to run index.js, the main/entry file in this case the script is executed with "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"npm start"}]},{"type":"text","value":". The application already includes code to watch for changes in the filesystem and restart the application if any changes are detected."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The project \"node-dev-env\" is here "},{"type":"element","tagName":"a","properties":{"href":"https://github.com/docker-hy/material-applications/tree/main/node-dev-env","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"https://github.com/docker-hy/material-applications/tree/main/node-dev-env"}]},{"type":"text","value":". I already included a development Dockerfile and a helpful docker-compose."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Dockerfile"}]}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"dockerfile"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-dockerfile"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-dockerfile"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"FROM"}]},{"type":"text","value":" node"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":"16\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"WORKDIR"}]},{"type":"text","value":" /usr/src/app\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"COPY"}]},{"type":"text","value":" package* ./\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"RUN"}]},{"type":"text","value":" npm install"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"docker-compose.yml"}]}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"yaml"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-yaml"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-yaml"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","key","atrule"]},"children":[{"type":"text","value":"version"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"'3.8'"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","key","atrule"]},"children":[{"type":"text","value":"services"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","key","atrule"]},"children":[{"type":"text","value":"node-dev-env"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","key","atrule"]},"children":[{"type":"text","value":"build"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":" . "},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"# Build with the Dockerfile here"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","key","atrule"]},"children":[{"type":"text","value":"command"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":" npm start "},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"# Run npm start as the command"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","key","atrule"]},"children":[{"type":"text","value":"ports"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":"\n      "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"-"}]},{"type":"text","value":" 3000"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":":"}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"3000"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"# The app uses port 3000 by default, publish it as 3000"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","key","atrule"]},"children":[{"type":"text","value":"volumes"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":"\n      "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"-"}]},{"type":"text","value":" ./"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":"/usr/src/app "},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"# Let us modify the contents of the container locally"}]},{"type":"text","value":"\n      "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"-"}]},{"type":"text","value":" node_modules"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":"/usr/src/app/node_modules "},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"# A bit of node magic, this ensures the dependencies built for the image are not available locally."}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","key","atrule"]},"children":[{"type":"text","value":"container_name"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":" node"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"-"}]},{"type":"text","value":"dev"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"-"}]},{"type":"text","value":"env "},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"# Container name for convenience"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","key","atrule"]},"children":[{"type":"text","value":"volumes"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"# This is required for the node_modules named volume"}]},{"type":"text","value":"\n  node_modules"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":":"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"And that's it. We'll use volume to copy all source code inside the volume so CMD will run the application we're developing. Let's try it!"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker-compose up\nCreating network \"node-dev-env_default\" with the default driver\nCreating volume \"node-dev-env_node_modules\" with default driver\nBuilding node-dev-env\nStep 1/4 : FROM node:14\n...\n\nAttaching to node-dev-env\nnode-dev-env    |\nnode-dev-env    | > dev-env@1.0.0 start /usr/src/app\nnode-dev-env    | > nodemon index.js\n...\n\nnode-dev-env    | App listening in port 3000"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Great! The initial start up is a bit slow. It is a lot faster now that the image is already built. We can rebuild the whole environment whenever we want with "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker-compose up --build"}]},{"type":"text","value":"."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let's see if the application works. Use browser to access "},{"type":"element","tagName":"a","properties":{"href":"http://localhost:3000","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"http://localhost:3000"}]},{"type":"text","value":", it should do a simple plus calculation with the query params."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"However, the calulation doesn't make sense! Let's fix the bug. I bet it's this line right here "},{"type":"element","tagName":"a","properties":{"href":"https://github.com/docker-hy/material-applications/blob/main/node-dev-env/index.js#L5","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"https://github.com/docker-hy/material-applications/blob/main/node-dev-env/index.js#L5"}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"When I change the line, on my host machine the application instantly notices that files have changed:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"▶ docker-compose up\nStarting node-dev-env ... done\nAttaching to node-dev-env\nnode-dev-env    |\nnode-dev-env    | > dev-env@1.0.0 start /usr/src/app\nnode-dev-env    | > nodemon index.js\nnode-dev-env    |\nnode-dev-env    | [nodemon] 2.0.7\nnode-dev-env    | [nodemon] to restart at any time, enter `rs`\nnode-dev-env    | [nodemon] watching path(s): *.*\nnode-dev-env    | [nodemon] watching extensions: js,mjs,json\nnode-dev-env    | [nodemon] starting `node index.js`\nnode-dev-env    | App listening in port 3000\nnode-dev-env    | [nodemon] restarting due to changes...\nnode-dev-env    | [nodemon] starting `node index.js`\nnode-dev-env    | App listening in port 3000"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"And now a page refresh shows that our code change fixed the issue. The development environment works."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The next exercise can be extremely easy or extremely hard. Feel free to have fun with it."}]},{"type":"element","tagName":"exercise","properties":{"name":"Exercise 2.11"},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Select a project that you already have and start utilizing containers in the development environment."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Explain what you have done. It can be anything, ranging from having supporting docker-compose.yml to have services containerized to developing inside a container."}]}]}]},"html":"<div><p>Containers are not only great in production. They can be used in development environments as well and offer a number of benefits. The same works-on-my-machine problem is faced often when a new developer joins the team. Not to mention the headache of switching runtime versions or a local database!</p><p>In our team at the University of Helsinki, the target for all project development environments is to have the setup so that a new developer only needs to install docker to get started. Of course, the target is usually missed as you need things like your favorite text editor.</p><p>Even if your application is not completely containerized during development, containers can be of use. For example, say you need mongodb version 4.0.22 installed in port 5656. It's now oneliner: \"docker run -p 5656:27017 mongo:4.0.22\" (mongodb uses 27017 as default port).</p><p>Let's containerize my node development environment. This will need some insider knowledge of node. But here is a simplified explanation if you're not familiar: libraries are defined in <code class=\"language-text\">package.json</code> and <code class=\"language-text\">package-lock.json</code> and installed with <code class=\"language-text\">npm install</code>. npm is node package manager and node is the runtime. To run application with the packages we have script defined in package.json that instructs node to run index.js, the main/entry file in this case the script is executed with <code class=\"language-text\">npm start</code>. The application already includes code to watch for changes in the filesystem and restart the application if any changes are detected.</p><p>The project \"node-dev-env\" is here <a href=\"https://github.com/docker-hy/material-applications/tree/main/node-dev-env\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/docker-hy/material-applications/tree/main/node-dev-env</a>. I already included a development Dockerfile and a helpful docker-compose.</p><p><strong>Dockerfile</strong></p><div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">FROM</span> node<span class=\"token punctuation\">:</span>16\n\n<span class=\"token keyword\">WORKDIR</span> /usr/src/app\n\n<span class=\"token keyword\">COPY</span> package* ./\n\n<span class=\"token keyword\">RUN</span> npm install</code></pre></div><p><strong>docker-compose.yml</strong></p><div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3.8'</span>\n\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">node-dev-env</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span> . <span class=\"token comment\"># Build with the Dockerfile here</span>\n    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> npm start <span class=\"token comment\"># Run npm start as the command</span>\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> 3000<span class=\"token punctuation\">:</span><span class=\"token number\">3000</span> <span class=\"token comment\"># The app uses port 3000 by default, publish it as 3000</span>\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> ./<span class=\"token punctuation\">:</span>/usr/src/app <span class=\"token comment\"># Let us modify the contents of the container locally</span>\n      <span class=\"token punctuation\">-</span> node_modules<span class=\"token punctuation\">:</span>/usr/src/app/node_modules <span class=\"token comment\"># A bit of node magic, this ensures the dependencies built for the image are not available locally.</span>\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> node<span class=\"token punctuation\">-</span>dev<span class=\"token punctuation\">-</span>env <span class=\"token comment\"># Container name for convenience</span>\n\n<span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># This is required for the node_modules named volume</span>\n  node_modules<span class=\"token punctuation\">:</span></code></pre></div><p>And that's it. We'll use volume to copy all source code inside the volume so CMD will run the application we're developing. Let's try it!</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker-compose up\nCreating network &quot;node-dev-env_default&quot; with the default driver\nCreating volume &quot;node-dev-env_node_modules&quot; with default driver\nBuilding node-dev-env\nStep 1/4 : FROM node:14\n...\n\nAttaching to node-dev-env\nnode-dev-env    |\nnode-dev-env    | &gt; dev-env@1.0.0 start /usr/src/app\nnode-dev-env    | &gt; nodemon index.js\n...\n\nnode-dev-env    | App listening in port 3000</code></pre></div><p>Great! The initial start up is a bit slow. It is a lot faster now that the image is already built. We can rebuild the whole environment whenever we want with <code class=\"language-text\">docker-compose up --build</code>.</p><p>Let's see if the application works. Use browser to access <a href=\"http://localhost:3000\" target=\"_blank\" rel=\"noopener noreferrer\">http://localhost:3000</a>, it should do a simple plus calculation with the query params.</p><p>However, the calulation doesn't make sense! Let's fix the bug. I bet it's this line right here <a href=\"https://github.com/docker-hy/material-applications/blob/main/node-dev-env/index.js#L5\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/docker-hy/material-applications/blob/main/node-dev-env/index.js#L5</a></p><p>When I change the line, on my host machine the application instantly notices that files have changed:</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">▶ docker-compose up\nStarting node-dev-env ... done\nAttaching to node-dev-env\nnode-dev-env    |\nnode-dev-env    | &gt; dev-env@1.0.0 start /usr/src/app\nnode-dev-env    | &gt; nodemon index.js\nnode-dev-env    |\nnode-dev-env    | [nodemon] 2.0.7\nnode-dev-env    | [nodemon] to restart at any time, enter `rs`\nnode-dev-env    | [nodemon] watching path(s): *.*\nnode-dev-env    | [nodemon] watching extensions: js,mjs,json\nnode-dev-env    | [nodemon] starting `node index.js`\nnode-dev-env    | App listening in port 3000\nnode-dev-env    | [nodemon] restarting due to changes...\nnode-dev-env    | [nodemon] starting `node index.js`\nnode-dev-env    | App listening in port 3000</code></pre></div><p>And now a page refresh shows that our code change fixed the issue. The development environment works.</p><p>The next exercise can be extremely easy or extremely hard. Feel free to have fun with it.</p><exercise name=\"Exercise 2.11\"><p>Select a project that you already have and start utilizing containers in the development environment.</p><p>Explain what you have done. It can be anything, ranging from having supporting docker-compose.yml to have services containerized to developing inside a container.</p></exercise></div>","frontmatter":{"path":"/part-2/4-containers-in-development","title":"Containers in development"},"fileAbsolutePath":"/home/runner/work/github-actions/github-actions/data/part-2/section-4.md"},"allPages":{"edges":[{"node":{"id":"0bef8eef-de93-5202-8af6-02b5fe6ec755","frontmatter":{"path":"/faq","title":"Frequently asked questions"}}},{"node":{"id":"41156626-bde8-5a7c-ac92-ec312076480a","frontmatter":{"path":"/frontmatter-guide","title":"Frontmatter-guide"}}},{"node":{"id":"37487c30-534e-506d-883c-b01a30949500","frontmatter":{"path":"/getting-started","title":"Getting started"}}},{"node":{"id":"77678795-397b-583f-bc6b-dc8c20f6525e","frontmatter":{"path":"/","title":"About this course"}}},{"node":{"id":"67c531a3-28aa-559a-8475-f768021829f2","frontmatter":{"path":"/links","title":"Links"}}},{"node":{"id":"2df82908-2caf-5bdd-bf0c-8113de55000a","frontmatter":{"path":"/part-1","title":"Part 1"}}},{"node":{"id":"1d814ff0-9cd5-5a92-b1fc-b3009eb70d9a","frontmatter":{"path":"/part-1/2-running-and-stopping","title":"Running and stopping containers"}}},{"node":{"id":"bff7ba6f-db2c-57b8-9bc7-a7b6f0b0ae86","frontmatter":{"path":"/part-1/3-in-depth-dive-to-images","title":"In-depth dive to images"}}},{"node":{"id":"596768d5-0f2e-5931-a5ad-36213dde53b9","frontmatter":{"path":"/part-1/4-defining-start-conditions","title":"Defining start conditions for the container"}}},{"node":{"id":"4bbdd8da-2aa2-5fad-b1d8-c16e6721792a","frontmatter":{"path":"/part-1/5-volumes-and-ports","title":"Interacting with the container via volumes and ports"}}},{"node":{"id":"a828a58c-1e1e-57c7-b755-fdff4b7055be","frontmatter":{"path":"/part-1/6-docker-hub","title":"Utilizing tools from the Registry"}}},{"node":{"id":"620db84d-9937-5055-92a6-5a4a360a5164","frontmatter":{"path":"/part-1/7-summary","title":"Summary"}}},{"node":{"id":"873dca8b-d040-5608-9b96-0a7d98e85974","frontmatter":{"path":"/part-2","title":"Part 2"}}},{"node":{"id":"96fc03c4-03c2-5fe0-b8cc-adcb4ec70c5d","frontmatter":{"path":"/part-2/1-migrating-to-docker-compose","title":"Migrating to docker compose"}}},{"node":{"id":"f6a251cc-98b5-51da-bfd9-3e9292d0a2e0","frontmatter":{"path":"/part-2/2-docker-networking","title":"Docker networking"}}},{"node":{"id":"6b09524a-3300-5cbe-81f2-2d17c9b6db41","frontmatter":{"path":"/part-2/3-volumes-in-action","title":"Volumes in action"}}},{"node":{"id":"e540cf5b-56e1-580f-8f88-31edacafe428","frontmatter":{"path":"/part-2/4-containers-in-development","title":"Containers in development"}}},{"node":{"id":"a1b889d8-4208-5ab3-a0f1-e60c1b22f098","frontmatter":{"path":"/part-2/5-summary","title":"Summary"}}},{"node":{"id":"d2278081-cb52-560f-9ad9-d390682cdc8c","frontmatter":{"path":"/part-3","title":"Part 3"}}},{"node":{"id":"e6eabd79-e91b-55ea-9749-864921da8204","frontmatter":{"path":"/part-3/1-deeper-understainding-of-containers","title":"Deeper understanding of containers"}}},{"node":{"id":"5e6a2ffe-7091-51a3-982f-4b77fa47caa1","frontmatter":{"path":"/part-3/2-deployment-pipelines","title":"Deployment pipelines"}}},{"node":{"id":"1c515bb2-daed-5445-bc9b-f08746fa1151","frontmatter":{"path":"/part-1/1-getting-started","title":"Definitions and basic concepts"}}},{"node":{"id":"c29c1489-bbec-5198-9797-a57896ccc1c5","frontmatter":{"path":"/part-3/6-end","title":"End"}}},{"node":{"id":"4c1acb10-bd08-52a2-bbb7-3bf3dd578525","frontmatter":{"path":"/part-3/3-using-non-root-user","title":"Using a non-root user"}}},{"node":{"id":"a2bdf824-5e5e-57da-94a7-395e8bc5ad26","frontmatter":{"path":"/part-3/5-multi-host-environments","title":"Multi-host environments"}}},{"node":{"id":"1f373fc5-9117-5346-ac21-48fceadc9b95","frontmatter":{"path":"/part-3/4-optimizing-the-image-size","title":"Optimizing the image size"}}}]}},"pageContext":{}},"staticQueryHashes":["3294351120","994120085"]}